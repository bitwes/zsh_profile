#!/bin/zsh
PATH=$PATH:$ZSHFILES/bin:/usr/local/bin:/usr/local/go/bin/:/Users/212551038/go/bin

export EDITOR=emacs

alias gobash='bash -l'
alias azsh="atom $ZSHFILES"
#various
alias dot='. ~/.zshrc'
alias ec='emacs '
alias ecbash='emacs $BASHFILES/*'
alias fcount='ls -l | grep -v ^l | wc -l'
alias untarball='tar xvf '
alias fuser='/sbin/fuser ' #shows users of files, just wanted to remember it.

#ls related
alias la='ls -lah'
#alias ls='ls -hide='"'"'*~*'"'"' -hide='"'"'*#*'"'"' --color=tty '
#alias ls='ls --color=tty '
alias ll='ls -l'
alias lshid='ls *~* *#* -a \.*~*'
alias lsd='ls -d */'
alias lsf='find . -maxdepth 1 -type f | xargs ls -d '    #'ls -lh | grep -v ^d'
alias llf='find . -maxdepth 1 -type f | xargs ls -ldh '
alias lsl='echo DIR; lld; echo DOT; l. -lh; echo FILES; llf;'
alias lathr='ls -lathr '

alias lsx='find . -maxdepth 1 -perm /111 | xargs ls -ld --color=tty'
alias lsxf='find . -maxdepth 1 -perm /111 -type f | xargs ls -ld '
alias lsxd='find . -maxdepth 1 -perm /111 -type d | xargs ls -ld '

alias lsshared='find . -maxdepth 1 -perm /077 | xargs ls -ld '
alias lssharedx='find . -maxdepth 1 -perm /011 | xargs ls -ld '
alias lssharedr='find . -maxdepth 1 -perm /044 | xargs ls -ld '
alias lssharedw='find . -maxdepth 1 -perm /022 | xargs ls -ld '

alias llext="find . -maxdepth 1 -type f -name \"*.*\" | awk -F. '{print \$NF}' | sort -u"
alias llbyext='llext | _ls_by_extension'

alias lld='ls -ld */'
alias lldot='l. -lh'

#CD up (copied from gary)
alias cdu='cd ..'
alias cdu2='cd ../../'
alias cdu3='cd ../../../'
alias cdu4='cd ../../../../'
alias cdu5='cd ../../../../../'
alias cdu6='cd ../../../../../../'
alias cdu7='cd ../../../../../../../'
alias cdu8='cd ../../../../../../../../'
alias cdu9='cd ../../../../../../../../../'

alias cd-='cd -'
alias dirs='dirs -v'

alias azsh='atom $ZSHFILES'
alias dirsize='du -hd 1 | sort -rh' # 'du -hcd 1'

#------------------------------------------------------
# simplifies use of find for most of what you want.
# pass in the value in "" and it will look for the file
# from the current directory on down using case insenative
# search
#------------------------------------------------------
fnd(){
	find ./ -iname "$1"
}


#------------------------------------------------------
# simplifies grep.  does a recursive case insesative
# search from the current directory
#------------------------------------------------------
grp(){
 grep -ir "$1" ./
}


#------------------------------------------------------
# Lists files using find's -mtime option.  This allows
# you to list files by date modified.
#
# Parameters:
#  $1  days old
#      x = changed x days ago
#     -x = changed between x days ago and today
#     +x = changed x days ago or later
#------------------------------------------------------
lldays(){
  #-ldtrh list files with details, human readable, reverse
  #       order by date, do not traverse sub dirs.
  eval "find ./ -maxdepth 1 -mtime $1 | xargs ls -ldtrh --color=tty"
}


#------------------------------------------------------
# ls not ll (see lldays)
#------------------------------------------------------
lsdays(){
  eval "find . -maxdepth 1 -mtime $1 | xargs ls $2 -d --color=tty"
}


#------------------------------------------------------
# I guess this works, who knows.
#------------------------------------------------------
linuxversion(){
    uname -mrs
    cat /etc/*-release
}


#------------------------------------------------------
# make a dir and cd into it
#------------------------------------------------------
mkcd(){
  mkdir -p $1
  cd $1
  pwd
}


#------------------------------------------------------
# Set the title of the tab and window in iterm2
#------------------------------------------------------
function title {
    echo -ne "\033]0;"$*"\007"
}


#------------------------------------------------------
# Kill the first backgrounded process.  Does  nothing if there are multiple.
# unless you specify the job number as the only optional parameter.
# Created b/c Godot quit responding to  ctrl+c so now when it hangs you have
# to use ctrl+z and this method.
#------------------------------------------------------
function kil {
	local line_count=`jobs | wc -l | tr -d '[:space:]'`
	local jobs_text=`jobs`
	local job_num=${jobs_text:1:1}

	if [[ -n  $1 ]]; then
		job_num=$1
		eval "kill -9 %${job_num}"
	elif [ $line_count -eq "1" ];then
		echo "Killing ${job_num}."
		eval "kill -9 %${job_num}"
	elif [ $line_count -eq "0" ];then
		echo "No jobs, nothing to kil."
	elseÂ 
		echo "Too many jobs, not sure which to kil."
		echo $jobs_text
	fi
}


function confirm {
	local msg=$1
	local choice='poop'

	while [ "${choice}" != "y" ] && [ "${choice}" != "n" ];
	do
		echo "${msg} (y/n)"
		read choice
	done

	echo "${choice}"
}